#!/usr/bin/env python3
# vim: set fileencoding=utf-8 :

a = open('test.in', 'r').read().split('\n\n')
# a = open('my.in', 'r').read().split('\n\n')


class Tile(dict):
    def __repr__(self):
        return f'Tile({self.id})'

    def __getitem__(self, i):
        if isinstance(i[0], slice):
            i = i[1]
            if i == -1:
                i = max(k[1] for k in self.keys())
            return tuple([self[k] for k in sorted(self.keys()) if k[1] == i])

        if isinstance(i[1], slice):
            i = i[0]
            if i == -1:
                i = max(k[0] for k in self.keys())
            return tuple([self[k] for k in sorted(self.keys()) if k[0] == i])

        return super().__getitem__(i)

    def __hash__(self):
        return self.id

    def get_sides(self):
        return set({
            self[0, :],
            tuple(reversed(self[0, :])),
            self[-1, :],
            tuple(reversed(self[-1, :])),
            self[:, 0],
            tuple(reversed(self[:, 0])),
            self[:, -1],
            tuple(reversed(self[:, -1])),
        })

    def find_neighbors(self, m):
        return [n for n in m.values() if self.get_sides().intersection(n.get_sides()) and n is not self]

    def map(self, c, neighbor_map, m=None):
        if m is None:
            m = dict()
        if self in m.values():
            return
        m[c] = self

        neighbor_map[self.id][-1].map((c[0], c[1] + 1), neighbor_map, m)
        neighbor_map[self.id][-2].map((c[0] + 1, c[1]), neighbor_map, m)

        return m


def parseTile(t):
    tId, *rest = t.split('\n')
    tId = int(tId[5:-1])
    m = Tile()
    m.id = tId
    for i, y in enumerate(rest):
        for j, x in enumerate(y):
            m[j, i] = x

    return tId, m


a = {parseTile(a)[0]: parseTile(a)[1] for a in a}

# print(a)

# print(a[2311].get_sides().intersection(a[1951].get_sides()))
# print(a[2311].get_sides())
# print(a[1951].get_sides())

neighbors = {k: m.find_neighbors(a) for k, m in a.items()}
# neighbors = {2797: {1327, 1291, 3499, 1279}, 3137: {2089, 3769, 2671}, 2633: {2269, 1327, 3181, 1087}, 1879: {1439, 1699, 1831, 3847}, 1429: {3217, 3923, 2833, 1151}, 2857: {2381, 2029, 3167}, 3803: {3769, 2099, 1699, 1831}, 1697: {3631, 1381, 2383, 3727}, 3823: {1321, 1373, 3461, 1447}, 1619: {2393, 3037, 1013, 2207}, 3257: {2393, 3371, 3037, 1471}, 3061: {1571, 2371, 1297, 1151}, 2371: {2593, 3061, 1669, 2351}, 3919: {2089, 1987, 2647}, 2063: {1153, 2909, 3167}, 3637: {1321, 3643, 1373, 2711}, 2393: {3257, 1619, 1229, 1607}, 1381: {1697, 1721, 3049, 1871}, 2647: {1483, 1709, 3919}, 2087: {1741, 1483, 3469, 3119}, 2351: {3923, 2371, 3301, 1151}, 1163: {1289, 1259, 2963, 1901}, 3877: {2833, 3923, 3499, 1229}, 3697: {2917, 3701, 1973}, 3329: {1289, 1153, 2909, 2287}, 1103: {1289, 2287, 1901, 1039}, 2557: {2111, 3631, 2383}, 1291: {3433, 2837, 3571, 2797}, 3469: {3617, 3847, 3049, 2087}, 1741: {3617, 1451, 2087}, 2609: {1097, 3779, 2917, 3701}, 3863: {2269, 1699, 3181, 1439}, 3041: {3217, 1571, 1151}, 3701: {2207, 3697, 1277, 2609}, 3251: {2897, 2099, 1597, 1543}, 2539: {1297, 1571, 1789}, 2099: {3163, 3803, 3251, 2663}, 1511: {3833, 1979, 1597, 1543}, 2029: {2857, 3643, 1973}, 3217: {3041, 1201, 1429}, 1321: {1069, 2381, 3637, 3823}, 1259: {1163, 3917, 1499}, 2203: {2909, 1069, 1933, 2287}, 3847: {3119, 2141, 3469, 1879}, 1447: {3169, 3623, 1549, 3823}, 2381: {2857, 2131, 3643, 1321}, 1319: {2579, 2593, 3307}, 2897: {3251, 3571, 2837, 2663}, 3833: {2593, 2579, 1669, 1511}, 1699: {3803, 3863, 2663, 1879}, 2671: {3137, 3163, 1733}, 1201: {3217, 2833, 1823}, 2141: {1439, 3049, 1871, 3847}, 1289: {3329, 1163, 3917, 1103}, 1831: {3119, 3803, 2677, 1879}, 1117: {3313, 2287, 1933, 1039}, 1549: {1279, 1373, 1607, 1447}, 1373: {1013, 1549, 3637, 3823}, 1663: {1097, 3779, 3529}, 3037: {3257, 1619, 3529, 3779}, 3067: {2111, 1901, 2383, 1039}, 3727: {1697, 3019, 1871, 2999}, 2963: {2659, 1163, 1499}, 1069: {1321, 2131, 2203, 3461}, 3163: {3769, 2099, 1597, 2671}, 1721: {2789, 1381, 3631}, 1039: {2999, 3067, 1117, 1103}, 2383: {1697, 3067, 2557, 2999}, 3181: {2633, 2341, 3511, 3863}, 1823: {1201, 3371, 1471}, 3623: {2447, 1087, 3461, 1447}, 3169: {1327, 1279, 1087, 1447}, 1597: {3163, 3251, 1733, 1511}, 2677: {3769, 2089, 1987, 1831}, 1087: {2633, 2341, 3169, 3623}, 3461: {3623, 1069, 1933, 3823}, 3779: {2207, 2609, 3037, 1663}, 1543: {3251, 2837, 1669, 1511}, 3307: {1297, 1789, 1319}, 1499: {1259, 2963}, 3433: {3301, 3923, 1291, 3499}, 1571: {3041, 2539, 3061}, 1277: {1973, 3643, 3701, 2711}, 1901: {2659, 1163, 3067, 1103}, 2999: {3313, 1039, 2383, 3727}, 2659: {2963, 1901, 2111}, 1229: {2393, 3371, 3877, 3361}, 2579: {3833, 1979, 1319}, 2089: {3137, 2677, 3919}, 2909: {3329, 2131, 2203, 2063}, 2447: {3313, 2341, 1933, 3623}, 1471: {3257, 3529, 1823}, 1151: {3061, 3041, 1429, 2351}, 1279: {3169, 1549, 2797, 3361}, 1451: {1483, 1741, 1709}, 3631: {1697, 1721, 2557}, 1013: {1619, 1373, 1607, 2711}, 1709: {1451, 2647}, 3643: {2029, 2381, 3637, 1277}, 2789: {1721, 3049, 3617}, 1097: {2609, 3083, 1663}, 2711: {1277, 3637, 1013, 2207}, 3529: {1471, 3037, 1663}, 3167: {2857, 2131, 2063}, 1297: {2593, 2539, 3061, 3307}, 3499: {3433, 3877, 2797, 3361}, 1871: {3511, 2141, 1381, 3727}, 2131: {1069, 2909, 2381, 3167}, 2663: {2269, 2897, 2099, 1699}, 3301: {3433, 2837, 1669, 2351}, 1483: {1451, 2087, 1987, 2647}, 3371: {3257, 1229, 2833, 1823}, 3511: {1439, 3019, 3181, 1871}, 1327: {2633, 3571, 2797, 3169}, 2269: {2633, 3571, 2663, 3863}, 3617: {1741, 2789, 3469}, 3019: {3511, 3313, 2341, 3727}, 3049: {2789, 2141, 1381, 3469}, 2341: {2447, 3019, 3181, 1087}, 2837: {2897, 1291, 3301, 1543}, 3571: {2897, 1291, 2269, 1327}, 1987: {3119, 1483, 2677, 3919}, 1979: {2579, 1733, 1511}, 1933: {2203, 1117, 3461, 2447}, 1607: {2393, 1549, 1013, 3361}, 3119: {1987, 3847, 1831, 2087}, 3923: {3433, 3877, 1429, 2351}, 3917: {1289, 1153, 1259}, 3313: {2447, 3019, 1117, 2999}, 3083: {1097, 2917}, 1733: {1979, 1597, 2671}, 1789: {2539, 3307}, 1153: {3329, 3917, 2063}, 3361: {3499, 1229, 1607, 1279}, 1973: {3697, 2029, 1277}, 2917: {3697, 3083, 2609}, 2833: {1201, 3877, 1429, 3371}, 2287: {3329, 2203, 1117, 1103}, 2207: {1619, 3701, 3779, 2711}, 1439: {3511, 3863, 2141, 1879}, 1669: {3833, 2371, 3301, 1543}, 2593: {3833, 2371, 1297, 1319}, 3769: {3137, 3163, 3803, 2677}, 2111: {2659, 3067, 2557}}


m = {(0, 0): 1951, (2, 2): 1171}
print(a[1951].map((0, 0), neighbors, m))
# print(neighbors)

# print(b[0, :])
